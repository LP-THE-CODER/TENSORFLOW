import numpy as np
import os
from keras.datasets import cifar10
from keras.models import Sequential
from keras.layers import LSTM
from tensorflow.keras.optimizers import Adam
from keras.utils import to_categorical
#LOAD DATASET
np.random.seed(100)
(X_train,y_train),(X_test,y_test)=cifar10.load_data()
X_train=X_train.reshape(50000,3072)
X_test=X_test.reshape(10000,3072)
#gaussian normalization (z-score)
X_train=(X_train- np.mean(X_train))/np.std(X_train)
X_test=(X_test- np.mean(X_test))/np.std(X_test)
from keras.utils import to_categorical

labels = 10
y_train = to_categorical(y_train, labels)
y_test = to_categorical(y_test, labels)

from keras.src.layers.regularization.spatial_dropout3d import  Dropout
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import Activation
from tensorflow.keras.layers import Dropout
model=Sequential()
model.add(Dense(512,input_shape=(3072,)))#3*32*32=3072
model.add(Activation('relu'))
model.add(Dropout(0.4))
model.add(Dense(120))
model.add(Activation('relu'))
model.add(Dropout(0.2))
model.add(Dense(labels))
model.add(Activation('sigmoid'))
adam=Adam(0.01)
model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])
model.fit(X_train,y_train,batch_size=1000, epochs=10,validation_data=(X_test,y_test))#epochs-trail and errors
score=model.evaluate(X_test,y_test,verbose=0)
print('Test accuracy:',score[1])
#PREDICT DIGIT(0-9)

model.predict(X_test) 

#save
model.save('model.h5')
jsonModel=model.to_json()
model.save_weights('modelWeight.h5')
#load weight
modelWt=model.load_weights('modelWeight.h5')
